#server:
#  port:  8402
#spring:
#  application:
#    name: config-client
#  cloud:
#    config:
#      profile: dev
##    profiles:
##        active: default
#
##配置仓库的分支
#      label: master
#
##      discovery:
###从配置中心读取文件
##        enabled: true
###配置中心的servieId，即服务名。
##        serviceId : config-server
#
#
##      uri: http://localhost:8401
##      enabled: true
#
#
##服务注册中心
#eureka:
#  client:
#    serviceUrl:
#      defaultZone: http://localhost:8101/eureka/
#
#
#
##配置服务中心的网址
##spring.cloud.bootstrap.enabled=false
#



eureka:
  client:
    service-url:
      defaultZone: http://localhost:8101/eureka/,http://localhost:8111/eureka/,http://localhost:8112/eureka/
management:
  security:
    enabled: false
#logging:
#  level:
#    root: debug

#springcloud bus：用springcloud stream来实现消息的发布订阅
spring:
  cloud:
    stream:
      #指定用kafka stream来作为默认消息中间件
      default-binder: kafka
      kafka:
        #来自KafkaBinderConfigurationProperties
        binder:
          brokers: name87:9094
          zkNodes: name85:2181,name86:2181,name87:2181/kafka0101
          #如果需要传递自定义header信息，需要在此处声明，不然自定义消息头是不会出现在最终消息当中的
#          headers: myType
          configuration:
            auto:
              offset:
                #可以设置原生kafka属性，比如设置新的消费组从最新的offset开始消费
                reset: latest
    config:
      profile: dev
      #高可用配置中心通过服务Id去自动发现config-server服务组
      discovery:
        enabled: true
        service-id: config-server
      #使用svn配置时lable是trunk ,github lable是master
      label: trunk
      #允许失败快速响应
      fail-fast: true
      #允许拉取配置失败时重试，需要添加spring-retry和spirng-aop依赖,下面配置的都是和默认值一样
      retry:
        max-attempts: 6
        initial-interval: 1000
        multiplier: 1.1
        max-interval: 2000


  application:
    name: myapp
server:
  port: 7001
---
server:
  port: 7001
spring:
  profiles: peer1
  application:
      #用来唯一标识context id, bus会根据上下文id的唯一性来避免处理event的逻辑被重复执行两次
      index: 1
  cloud:
    stream:
      bindings:
#      默认订阅发布的topic是springCloudBus
        #springCloudBus topic是默认值可以不配,对应的input output分别是springCloudBusInput,springCloudBusOutput,需要对bus stream定制的话可以配置这两个channel
        springCloudBusInput:
          destination: springCloudBus
          #可以指定消费组，避免每次生成随机group
          group: cloud-bus-testgroup:${spring.application.index}

---
server:
  port: 7002
spring:
  profiles: peer2
  application:
        index: 2
  cloud:
      stream:
        bindings:
          springCloudBusInput:
            destination: springCloudBus
            group: cloud-bus-testgroup:${spring.application.index}
